#!/bin/bash

if [[ -n "${SPEAK_DEBUG}" ]]; then
    set -x
fi

DIR="$(dirname "$0")"

function usage() {
    echo -n \
        "Usage: $(basename "$0")
Build addon for distribution.
"
}

function update_fastdl() {
    pushd "${DIR}/../src/speak"

    resource_file="lua/speak/gen/resources.lua"
    fastdl_root="../../dist/fastdl"
    prefixes=(resource sound)

    # Wipe existing resource file
    mkdir -p "${resource_file%/*}"
    printf "return {" >"${resource_file}"

    for prefix in "${prefixes[@]}"; do
        find . -type d -name "${prefix}" | while read dir; do
            find "${dir}" -type f ! -name '*.bz2' -a ! -name '.DS_Store' | while read file; do
                # Virtual path of the file for resource.AddFile( string path )
                resource="$(echo ${file#"./"} | sed -E 's/speak\/[[:alnum:]]+\/(.+)/\1/')"

                # Append new resource.AddFile( string path ) statement
                echo "Processing ${resource}"
                if [[ $resource != maps/* ]]; then
                    printf "\"%s\"," "${resource}" >>"${resource_file}"
                fi

                # Ensure FastDL directory structure exists
                mkdir -p "${fastdl_root}/${resource%/*}"

                # Only recompress resources if SHA512/256 is invalid
                compressed_resource="${fastdl_root}/${resource}.bz2"
                if [[ ! $(shasum -a 512256 -c "${compressed_resource}.checksum") ]]; then
                    bzip2 -k -c "${file}" >"${compressed_resource}"
                    shasum -a 512256 "${compressed_resource}" >"${compressed_resource}.checksum"

                    # Hack to make SRCDS recognize bz2 files exist on FastDL
                    if [[ $resource == *bsp ]]; then
                        cp "${file}" "${fastdl_root}/${resource}"
                    fi
                fi
            done
        done
    done

    printf "}" >>"${resource_file}"

    popd
}

if [[ -n "${GIT_COMMIT}" ]]; then
    GIT_COMMIT="${GIT_COMMIT:0:7}"
else
    GIT_COMMIT="$(git rev-parse --short HEAD)"
fi

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${1:-}" = "--help" ]; then
        usage
    else
        echo "Updating Yarn dependencies"
        docker-compose \
            run --rm --no-deps app \
            yarn install

        ./scripts/test

        echo "Building static asset bundle"
        GIT_COMMIT="${GIT_COMMIT}" docker-compose \
            run --rm --no-deps app \
            yarn run build

        mkdir "${DIR}/../src/speak/lua/speak/gen"
        echo "Building emoji autocompletion data"
        emoji="$(jq -r '. |  map("\":" + .short_name + ":\"") | join(",")' "${DIR}/../src/app/node_modules/emoji-datasource/emoji.json")"
        printf "return {%s}\n" "${emoji}" \
            >"${DIR}/../src/speak/lua/speak/gen/emoji_data.lua"
        mkdir "${DIR}/../src/speak/lua/speak/static"

        printf "return \"%s\"\n" "$(git describe --always)" \
            >"${DIR}/../src/speak/lua/speak/gen/version.lua"

        echo "Building FastDL"
        update_fastdl

        echo "Building Workshop GMA"
        docker-compose run --rm \
            gmad create -folder garrysmod/addons/speak -out /usr/local/src/out/speak.gma

        echo "Building addon for distribution"
        mkdir -p "${DIR}/../dist/addons"
        rsync \
            -ar --delete \
            --exclude="addon.json" \
            --exclude="icon.jpg" \
            "${DIR}/../src/speak" "${DIR}/../dist/addons"
    fi
fi
